# -*- coding: utf-8 -*-
"""FinalProject

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sruNbvRK1w6h0fYgRHKDZ5Vh3pLOjxnb
"""


"""# Setup PyTroch Property

"""

import torch
import numpy as np
# fix random seed
def za_seed(seed):
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)  
    np.random.seed(seed)  
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True

za_seed(1126)

"""# Config"""

my_config = {
  "max_prob_len": 3072,
  "max_embedding_len": 512,
  "phone_dir": "./training/phone",
  "embedding_dir": "./training/embedding",
  "test_phone_dir": "./testing/phone",
  "test_embedding_dir": "./testing/embedding"
}

"""# Data

## Dataset
- Original dataset is [MATBN 中文廣播新聞語料庫]
"""

import os
import tqdm
import json
import torch
import random
from pathlib import Path
from torch.utils.data import Dataset
from torch.nn.utils.rnn import pad_sequence
DATA_DIR = "./"
 
 
class myDataset(Dataset):
  def __init__(self, phone_dir, embedding_dir, split="test"):
    # data: [batch, label]
    self.phone_dir = phone_dir
    self.embedding_dir = embedding_dir
    phone_files = os.listdir(self.phone_dir)
    self.data = []
    self.names = []
    self.split = split
    size = 0
    for idx, phones in enumerate(tqdm(phone_files)):
      name = phones.replace(".json", "")
      self.names.append(name)
    #   if size >= 4000:
    #       break
      if name not in os.listdir(self.embedding_dir):
        print(f"{name} in phone dir but not in embedding dir")
        continue
      embedding_files = os.listdir(self.embedding_dir + "/" + name)
      has_place = []
      for embeddings in embedding_files:
        _, start, end, _ = embeddings.split(".")
        has_place.append((start, end))
      has_place.sort()
      record_s, record_e = 0, 0
      i = 0
      while i < len(has_place):
        start, end = has_place[i]
        if start != record_s and record_e != 0: 
            size += 1
            self.data.append((idx, int(record_s), int(record_e) + 1))
            while i < len(has_place) and has_place[i][1] <= record_e:
                i += 1
            
        record_s, record_e = start, end
        i += 1
      size += 1
      self.data.append((idx, int(record_s), int(record_e)+1))

      
    
  def __len__(self):
    return len(self.data)
 
  def __getitem__(self, index):
    idx, s, e = self.data[index]
    name = self.names[idx]
    with open(self.phone_dir + "/" + name + ".json", "r") as fp:
        ph = json.load(fp)
    with open(self.embedding_dir + "/" + name + "/" + name + "." + str(s) + "." + str(e - 1) + ".json", "r") as fp:
        ems = json.load(fp)
    length = len(ems)
    probs = torch.FloatTensor(ph[s: e])
    embeddings = torch.FloatTensor(ems)
    return probs, embeddings, length

"""## Dataloader
- Split dataset into training dataset(90%) and validation dataset(10%).
- Create dataloader to iterate the data.

"""

import torch
from torch.utils.data import DataLoader, random_split
from torch.nn.utils.rnn import pad_sequence
def top_k_top_p_filtering(logits, top_k=0, top_p=0.0, filter_value=-float('Inf')):
        """ Filter a distribution of logits using top-k and/or nucleus (top-p) filtering
            Args:
                logits: logits distribution shape (vocabulary size)
                top_k >0: keep only top k tokens with highest probability (top-k filtering).
                top_p >0.0: keep the top tokens with cumulative probability >= top_p (nucleus filtering).
                Nucleus filtering is described in Holtzman et al. (http://arxiv.org/abs/1904.09751)
        """
        assert logits.dim() == 1  # batch size 1 for now - could be updated for more but the code would be less clear
        top_k = min(top_k, logits.size(-1))  # Safety check
        if top_k > 0:
            # Remove all tokens with a probability less than the last token of the top-k
            indices_to_remove = logits < torch.topk(logits, top_k)[0][..., -1, None]
            logits[indices_to_remove] = filter_value

        if top_p > 0.0:
            sorted_logits, sorted_indices = torch.sort(logits, descending=True)
            cumulative_probs = torch.cumsum(F.softmax(sorted_logits, dim=-1), dim=-1)

            # Remove tokens with cumulative probability above the threshold
            sorted_indices_to_remove = cumulative_probs > top_p
            # Shift the indices to the right to keep also the first token above the threshold
            sorted_indices_to_remove[..., 1:] = sorted_indices_to_remove[..., :-1].clone()
            sorted_indices_to_remove[..., 0] = 0

            indices_to_remove = sorted_indices[sorted_indices_to_remove]
            logits[indices_to_remove] = filter_value
        return logits
from torch.distributions import Categorical
def collate_batch(batch):
  # Process features within a batch.
  """Collate a batch of data."""
  probs, embeddings, lengths = zip(*batch)
  # Because we train the model batch by batch, we need to pad the features in the same batch to make their lengths the same.
  probs_ = []
  src_masks = []
  for idx, prob in enumerate(probs):
      ps = []
      for p in prob:
          logits = top_k_top_p_filtering(torch.logit(p), top_p = 0.5)
          t_p = Categorical(logits = logits)
          new_prob = torch.zeros(1, 1, 234)
          new_prob[0, 0, t_p.sample()] = 1
          ps.append(new_prob)
      probs_.append(torch.cat(ps, dim = 1))
      
  for idx, prob in tqdm(enumerate(probs_)):
      if probs_[idx].shape[1] < my_config["max_prob_len"]:
          probs_[idx] = torch.cat([probs_[idx],torch.Tensor([[[0 if i != 233 else 1 for i in range(234)] for _ in range(my_config["max_prob_len"] - probs_[idx].shape[1])]])],dim=1)
      else:
          probs_[idx] = probs_[idx][:,:my_config["max_prob_len"],:]
  probs = torch.cat(probs_, dim=0)

  embeddings = list(embeddings)
  for idx, embedding in enumerate(embeddings):
    embeddings[idx] = embedding.unsqueeze(0)
    embeddings[idx] = torch.cat([embeddings[idx],torch.Tensor([[[0 for i in range(768)] for _ in range(my_config["max_embedding_len"] - embeddings[idx].shape[1])]])],dim=1)
  embeddings = torch.cat(embeddings, dim=0)

  return probs, embeddings, lengths


def get_dataloader(data_dir, batch_size, n_workers):
  """Generate dataloader"""
  dataset = myDataset(my_config["phone_dir"], my_config["embedding_dir"], "train")
  # Split dataset into training dataset and validation dataset
  trainlen = int(0.9 * len(dataset))
  lengths = [trainlen, len(dataset) - trainlen]
  trainset, validset = random_split(dataset, lengths)

  train_loader = DataLoader(
    trainset,
    batch_size=batch_size,
    shuffle=True,
    drop_last=True,
    num_workers=n_workers,
    pin_memory=True,
    collate_fn=collate_batch,
  )
  valid_loader = DataLoader(
    validset,
    batch_size=batch_size,
    num_workers=n_workers,
    drop_last=True,
    pin_memory=True,
    collate_fn=collate_batch,
  )

  return train_loader, valid_loader

"""# Model
- TransformerEncoderLayer:
  - Base transformer encoder layer in [Attention Is All You Need](https://arxiv.org/abs/1706.03762)
  - Parameters:
    - d_model: the number of expected features of the input (required).

    - nhead: the number of heads of the multiheadattention models (required).

    - dim_feedforward: the dimension of the feedforward network model (default=2048).

    - dropout: the dropout value (default=0.1).

    - activation: the activation function of intermediate layer, relu or gelu (default=relu).

- TransformerEncoder:
  - TransformerEncoder is a stack of N transformer encoder layers
  - Parameters:
    - encoder_layer: an instance of the TransformerEncoderLayer() class (required).

    - num_layers: the number of sub-encoder-layers in the encoder (required).

    - norm: the layer normalization component (optional).
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable


class Seq_Encode(nn.Module):
  def __init__(self, input_dim = 234, output_dim = 768, dropout=0.1):
    super().__init__()
    # Project the dimension of features from that of input into d_model.
    # TODO:
    #   Change Transformer to Conformer.
    #   https://arxiv.org/abs/2005.08100
    self.prenet = nn.Linear(input_dim, output_dim)
    self.encoderlayer = nn.TransformerEncoderLayer(d_model = output_dim, dim_feedforward = 1024, nhead=2) 
    self.decoderlayer = nn.TransformerDecoderLayer(d_model = output_dim, dim_feedforward = 1024, nhead=2) 

    self.encoder = nn.TransformerEncoder(self.encoderlayer, num_layers = 3)
    self.decoder = nn.TransformerDecoder(self.decoderlayer, num_layers = 3)

  def forward(self, batch, labels, steps, device):
    """
    args:
      mels: (batch size, length, 40)
    return:
      out: (batch size, n_spks)
    """
    encoder_out = self.encoder(self.prenet(batch).permute(1, 0, 2))
    tgtmask = (torch.triu(torch.ones(my_config["max_embedding_len"], my_config["max_embedding_len"])) == 1).transpose(0, 1)
    tgtmask = tgtmask.float().masked_fill(tgtmask == 0, float("-inf")).masked_fill(tgtmask == 1, float(0.0)).to(device)
    outputs = self.decoder(labels.permute(1, 0, 2) , memory = encoder_out, tgt_mask = tgtmask)
    schedule = (torch.rand(labels.shape[1], labels.shape[0]) >= steps / 200000)
    for idx, batch in enumerate(outputs):
        for idx_ in range(len(batch)):
            if schedule[idx, idx_].item():
                outputs[idx,idx_,:] = labels[idx_, idx, :]
    outputs = self.decoder(outputs , memory = encoder_out, tgt_mask = tgtmask)
    return outputs

  def generate(self, batch, labels, length, device):
    """
    args:
      mels: (batch size, length, 40)
    return:
      out: (batch size, n_spks)
    """
    encoder_out = self.encoder(self.prenet(batch).permute(1, 0, 2))
    start_ = labels[:, 0, :]
    outputs = torch.zeros(length[0], 1, 768).float().to(device)
    outputs[0, :, :] = start_.unsqueeze(0)
    for i in range(1, length[0]):
        tgtmask = (torch.triu(torch.ones(i, i)) == 1).transpose(0, 1)
        tgtmask = tgtmask.float().masked_fill(tgtmask == 0, float("-inf")).masked_fill(tgtmask == 1, float(0.0)).to(device)
        tmp_out = self.decoder(outputs[:i, :, :] , memory = encoder_out, tgt_mask = tgtmask)
        outputs[i, :, :] = tmp_out[-1, :, :]
        
    return outputs


"""# Learning rate schedule
- For transformer architecture, the design of learning rate schedule is different from that of CNN.
- Previous works show that the warmup of learning rate is useful for training models with transformer architectures.
- The warmup schedule
  - Set learning rate to 0 in the beginning.
  - The learning rate increases linearly from 0 to initial learning rate during warmup period.
"""

import math

import torch
from torch.optim import Optimizer
from torch.optim.lr_scheduler import LambdaLR


def get_cosine_schedule_with_warmup(
  optimizer: Optimizer,
  num_warmup_steps: int,
  num_training_steps: int,
  num_cycles: float = 0.5,
  last_epoch: int = -1,
):
  """
  Create a schedule with a learning rate that decreases following the values of the cosine function between the
  initial lr set in the optimizer to 0, after a warmup period during which it increases linearly between 0 and the
  initial lr set in the optimizer.

  Args:
    optimizer (:class:`~torch.optim.Optimizer`):
      The optimizer for which to schedule the learning rate.
    num_warmup_steps (:obj:`int`):
      The number of steps for the warmup phase.
    num_training_steps (:obj:`int`):
      The total number of training steps.
    num_cycles (:obj:`float`, `optional`, defaults to 0.5):
      The number of waves in the cosine schedule (the defaults is to just decrease from the max value to 0
      following a half-cosine).
    last_epoch (:obj:`int`, `optional`, defaults to -1):
      The index of the last epoch when resuming training.

  Return:
    :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.
  """

  def lr_lambda(current_step):
    # Warmup
    if current_step < num_warmup_steps:
      return float(current_step) / float(max(1, num_warmup_steps))
    # decadence
    progress = float(current_step - num_warmup_steps) / float(
      max(1, num_training_steps - num_warmup_steps)
    )
    return max(
      0.0, 0.5 * (1.0 + math.cos(math.pi * float(num_cycles) * 2.0 * progress))
    )

  return LambdaLR(optimizer, lr_lambda, last_epoch)

"""# Model Function
- Model forward function.
"""

import torch


def model_fn(batch, model, criterion, device, y, step):
  """Forward a batch through the model."""

  mels, labels, lengths = batch
  mels = mels.to(device)
  labels = labels.to(device)

  outs = model(mels, labels, step, device)

  loss = criterion(outs.permute(1, 0, 2).contiguous().view(-1, 768), labels.contiguous().view(-1, 768), y.view(-1))
  return loss

"""# Validate
- Calculate accuracy of the validation set.
"""

from tqdm import tqdm
import torch


def valid(dataloader, model, criterion, device): 
  """Validate on validation set."""

  model.eval()
  running_loss = 0.0
  y = torch.ones(dataloader.batch_size, my_config["max_embedding_len"]).to(device)
  pbar = tqdm(total=len(dataloader.dataset), ncols=0, desc="Valid", unit=" uttr")
  for i, batch in enumerate(dataloader):
    with torch.no_grad():
      loss = model_fn(batch, model, criterion, device, y, i)
      running_loss += loss.item()

    pbar.update(dataloader.batch_size)
    pbar.set_postfix(
      loss=f"{running_loss / (i+1)}",
    )

  pbar.close()
  model.train()
  return running_loss / len(dataloader)

"""# Main function"""

from tqdm import tqdm

import torch
import torch.nn as nn
from torch.optim import AdamW
from torch.utils.data import DataLoader, random_split


def parse_args():
  """arguments"""
  config = {
    "data_dir": "./Dataset",
    "save_path": "sample.ckpt",
    "batch_size": 2,
    "n_workers": 0,
    "valid_steps": 2000,
    "warmup_steps": 1000,
    "save_steps": 5000,
    "total_steps": 0
  }

  return config


def main(
  data_dir,
  save_path,
  batch_size,
  n_workers,
  valid_steps,
  warmup_steps,
  total_steps,
  save_steps,
):
  """Main function."""
  device = torch.device("cuda:3" if torch.cuda.is_available() else "cpu")
  print(f"[Info]: Use {device} now!")

  train_loader, valid_loader = get_dataloader(data_dir, batch_size, n_workers)
  train_iterator = iter(train_loader)
  print(f"[Info]: Finish loading data!",flush = True)

  model = Seq_Encode().to(device)
  #model.load_state_dict(torch.load("model.ckpt"))
  criterion = nn.CosineEmbeddingLoss()
  optimizer = AdamW(model.parameters(), lr=1e-4)
  scheduler = get_cosine_schedule_with_warmup(optimizer, warmup_steps, total_steps)
  print(f"[Info]: Finish creating model!",flush = True)

  best_state_dict = None

  pbar = tqdm(total=valid_steps, ncols=0, desc="Train", unit=" step")
  best_loss = 10
  y = torch.ones(train_loader.batch_size, my_config["max_embedding_len"]).to(device)
  for step in range(total_steps):
    # Get data
    try:
      batch = next(train_iterator)
    except StopIteration:
      train_iterator = iter(train_loader)
      batch = next(train_iterator)

    loss = model_fn(batch, model, criterion, device, y, step)
    batch_loss = loss.item()

    # Updata model
    loss.backward()
    optimizer.step()
    scheduler.step()
    optimizer.zero_grad()
    
    # Log
    pbar.update()
    pbar.set_postfix(
      loss=f"{batch_loss:.6f}",
      step=step + 1,
    )

    # Do validation
    if (step + 1) % valid_steps == 0:
      pbar.close()

      valid_loss = valid(valid_loader, model, criterion, device)

      # keep the best model
      if valid_loss < best_loss:
        best_loss = valid_loss
        best_state_dict = model.state_dict()

      pbar = tqdm(total=valid_steps, ncols=0, desc="Train", unit=" step")

    # Save the best model so far.
    if (step + 1) % save_steps == 0 and best_state_dict is not None:
      torch.save(best_state_dict, save_path)
      pbar.write(f"Step {step + 1}, best model saved. (loss={1 - best_loss:.4f})")

  pbar.close()




"""# Inference

## Dataset of inference
"""

import os
import json
import torch
from pathlib import Path
from torch.utils.data import Dataset

"""## Main funcrion of Inference"""

import json
import csv
from pathlib import Path
from tqdm import tqdm

import torch
from torch.utils.data import DataLoader

def parse_args():
  """arguments"""
  config = {
    "data_dir": "./Dataset",
    "model_path": "./sample2.ckpt",
    "output_path": "./output.csv",
  }

  return config


def main(
  data_dir,
  model_path,
  output_path,
):
  """Main function."""
  device = torch.device("cuda:3" if torch.cuda.is_available() else "cpu")
  print(f"[Info]: Use {device} now!")

  dataset = myDataset(my_config["test_phone_dir"], my_config["test_embedding_dir"], "test")
  dataloader = DataLoader(
    dataset,
    batch_size=1,
    shuffle=False,
    drop_last=False,
    num_workers=8,
    collate_fn=collate_batch,
  )
  print(f"[Info]: Finish loading data!",flush = True)

  model = Seq_Encode().to(device)
  model.load_state_dict(torch.load("sample.ckpt"))
  model.eval()
  print(f"[Info]: Finish creating model!",flush = True)

  criterion = nn.CosineEmbeddingLoss()
  loss = 0.0
  total_similarity = 0.0
  for mels, labels, lengths in tqdm(dataloader):
    with torch.no_grad():
      mels = mels.to(device)
      labels = labels.to(device)
      y = torch.ones(1, lengths[0]).to(device)
      outs = model.generate(mels, labels, lengths, device)
      loss = 1 - criterion(outs.permute(1, 0, 2).contiguous().view(-1, 768), labels[:,:lengths[0],:].contiguous().view(-1, 768), y.view(-1)).item()
      total_similarity += loss
  print(f"Average Cosine Similarity: {total_similarity / len(dataloader)}")

if __name__ == "__main__":
  main(**parse_args())
